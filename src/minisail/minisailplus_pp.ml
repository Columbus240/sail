(* generated by Ott 0.28 from: ../ott/common.ott ../ott/minisailplus_ast_vct.ott ../ott/minisailplus_ast_ped.ott *)
open PPrintEngine
open PPrintCombinators
open Msp_ast.SyntaxVCT
open Msp_ast.SyntaxPED
open Msp_ast.Location
open Convert_pp

let rec pp_raw_lit x = match x with
| L_unit -> string "L_unit"
| L_zero -> string "L_zero"
| L_one -> string "L_one"
| L_true -> string "L_true"
| L_false -> string "L_false"
| L_num(num) -> string "L_num" ^^ string "(" ^^  string "\"" ^^ string (str_int num) ^^ string "\"" ^^ string ")"
| L_string(string_val) -> string "L_string" ^^ string "(" ^^  string "\"" ^^ string string_val ^^ string "\"" ^^ string ")"
| L_undef -> string "L_undef"
| L_real(real_val) -> string "L_real" ^^ string "(" ^^  string "\"" ^^ string real_val ^^ string "\"" ^^ string ")"
| _ -> string "some lit"

and pp_raw_order x = match x with
| Ord_inc -> string "Ord_inc"
| Ord_dec -> string "Ord_dec"
| Ord_def -> string "Ord_def"

and pp_raw_loop x = match x with
| While -> string "While"
| Until -> string "Until"


and pp_raw_xp x = match x with
| VNamed(id) -> string "VNamed" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string ")"
| VIndex -> string "VIndex"

(*and pp_raw_bsub x = match x with
| BS_empty -> string "BS_empty"
| BS_cons(bsub,bp,tvar) -> string "BS_cons" ^^ string "(" ^^ pp_raw_bsub bsub ^^ string "," ^^ pp_raw_bp bp ^^ string "," ^^  string "\"" ^^ string tvar ^^ string "\"" ^^ string ")"
 *)
and pp_raw_bp x = match x with
| B_var(tvar) -> string "B_var" ^^ string "(" ^^  string "\"" ^^ string tvar ^^ string "\"" ^^ string ")"
| B_tid(id) -> string "B_tid" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string ")"
| B_int -> string "B_int"
| B_bool -> string "B_bool"
| B_bit -> string "B_bit"
| B_unit -> string "B_unit"
| B_real -> string "B_real"
| B_vec(order,bp) -> string "B_vec" ^^ string "(" ^^ pp_raw_order order ^^ string "," ^^ pp_raw_bp bp ^^ string ")"
| B_list(bp) -> string "B_list" ^^ string "(" ^^ pp_raw_bp bp ^^ string ")"
| B_tuple(bp0) -> string "B_tuple" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (bp0) -> string "(" ^^ pp_raw_bp bp0 ^^ string ")") bp0) ^^ string "]" ^^ string ")"
| B_union(id,ctor0_tp0) -> string "B_union" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (ctor0,tp0) -> string "(" ^^  string "\"" ^^ string ctor0 ^^ string "\"" ^^ string "," ^^ pp_raw_tp tp0 ^^ string ")") ctor0_tp0) ^^ string "]" ^^ string ")"
| B_record(field0_bp0) -> string "B_record" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (field0,bp0) -> string "(" ^^  string "\"" ^^ string field0 ^^ string "\"" ^^ string "," ^^ pp_raw_bp bp0 ^^ string ")") field0_bp0) ^^ string "]" ^^ string ")"
| B_undef -> string "B_undef"
| B_reg _ -> string "B_reg"
| B_string -> string "B_string"
| B_exception -> string "B_exception"
| B_finite_set(num0) -> string "B_finite_set" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (num0) -> string "(" ^^  string "\"" ^^ string (str_int num0) ^^ string "\"" ^^ string ")") num0) ^^ string "]" ^^ string ")"

and pp_raw_tp x = match x with
| T_refined_type(zp,bp,cp) -> string "T_refined_type" ^^ string "(" ^^ pp_raw_xp zp ^^ string "," ^^ pp_raw_bp bp ^^ string "," ^^ pp_raw_cp cp ^^ string ")"

and pp_raw_ap x = match x with
| A_monotype(tp) -> string "A_monotype" ^^ string "(" ^^ pp_raw_tp tp ^^ string ")"
| A_function(xp,bp,cp,tp) -> string "A_function" ^^ string "(" ^^ pp_raw_xp xp ^^ string "," ^^ pp_raw_bp bp ^^ string "," ^^ pp_raw_cp cp ^^ string "," ^^ pp_raw_tp tp ^^ string ")"

and pp_raw_bop x = match x with
| Plus -> string "Plus"
| Minus -> string "Minus"
| Times -> string "Times"
| Div -> string "Div"
| Mod -> string "Mod"
| LEq -> string "LEq"
| LT -> string "LT"
| GT -> string "GT"
| GEq -> string "GEq"
| Eq -> string "Eq"
| And -> string "And"
| Or -> string "Or"
| NEq -> string "NEq"

and pp_raw_uop x = match x with
| Len -> string "Len"
| Exp -> string "Exp"
| Neg -> string "Neg"
| Nott -> string "Not"
| Abs -> string "Abs"

and pp_raw_cep x = match x with
| CE_val(vp) -> string "CE_val" ^^ string "(" ^^ pp_raw_vp vp ^^ string ")"
| CE_bop(bop,cep1,cep2) -> string "CE_bop" ^^ string "(" ^^ pp_raw_cep cep1 ^^ string "," ^^ pp_raw_bop bop ^^ string "," ^^ pp_raw_cep cep2 ^^ string ")"
| CE_many_plus(cep0) -> string "CE_many_plus" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (cep0) -> string "(" ^^ pp_raw_cep cep0 ^^ string ")") cep0) ^^ string "]" ^^ string ")"
| CE_uop(uop,cep) -> string "CE_uop" ^^ string "(" ^^ pp_raw_uop uop ^^ string "," ^^ pp_raw_cep cep ^^ string ")"
| CE_proj(p,cep) -> string "CE_proj" ^^ string "(" ^^  string "\"" ^^ string p ^^ string "\"" ^^ string "," ^^ pp_raw_cep cep ^^ string ")"
| CE_field_access(xp,field) -> string "CE_field_access" ^^ string "(" ^^ pp_raw_vp xp ^^ string "," ^^  string "\"" ^^ string field ^^ string "\"" ^^ string ")"

and pp_raw_cp x = match x with
| C_true -> string "C_true"
| C_false -> string "C_false"
| C_conj(cp1,cp2) -> string "C_conj" ^^ string "(" ^^ pp_raw_cp cp1 ^^ string "," ^^ pp_raw_cp cp2 ^^ string ")"
| C_conj_many(cp0) -> string "C_conj_many" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (cp0) -> string "(" ^^ pp_raw_cp cp0 ^^ string ")") cp0) ^^ string "]" ^^ string ")"
| C_disj(cp1,cp2) -> string "C_disj" ^^ string "(" ^^ pp_raw_cp cp1 ^^ string "," ^^ pp_raw_cp cp2 ^^ string ")"
| C_not(cp) -> string "C_not" ^^ string "(" ^^ pp_raw_cp cp ^^ string ")"
| C_eq(cep1,cep2) -> string "C_eq" ^^ string "(" ^^ pp_raw_cep cep1 ^^ string "," ^^ pp_raw_cep cep2 ^^ string ")"
| C_leq(cep1,cep2) -> string "C_leq" ^^ string "(" ^^ pp_raw_cep cep1 ^^ string "," ^^ pp_raw_cep cep2 ^^ string ")"
| C_imp(cp1,cp2) -> string "C_imp" ^^ string "(" ^^ pp_raw_cp cp1 ^^ string "," ^^ pp_raw_cp cp2 ^^ string ")"

and pp_raw_vp x = match x with
| V_lit(lit) -> string "V_lit" ^^ string "(" ^^ pp_raw_lit lit ^^ string ")"
| V_var(xp) -> string "V_var" ^^ string "(" ^^ pp_raw_xp xp ^^ string ")"
| V_vec(vp0) -> string "V_vec" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (vp0) -> string "(" ^^ pp_raw_vp vp0 ^^ string ")") vp0) ^^ string "]" ^^ string ")"
| V_list(vp0) -> string "V_list" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (vp0) -> string "(" ^^ pp_raw_vp vp0 ^^ string ")") vp0) ^^ string "]" ^^ string ")"
| V_cons(vp1,vp2) -> string "V_cons" ^^ string "(" ^^ pp_raw_vp vp1 ^^ string "," ^^ pp_raw_vp vp2 ^^ string ")"
| V_constr(ctor,vp) -> string "V_constr" ^^ string "(" ^^  string "\"" ^^ string ctor ^^ string "\"" ^^ string "," ^^ pp_raw_vp vp ^^ string ")"
| V_record(field0_vp0) -> string "V_record" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (field0,vp0) -> string "(" ^^  string "\"" ^^ string field0 ^^ string "\"" ^^ string "," ^^ pp_raw_vp vp0 ^^ string ")") field0_vp0) ^^ string "]" ^^ string ")"
| V_tuple(vp0) -> string "V_tuple" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (vp0) -> string "(" ^^ pp_raw_vp vp0 ^^ string ")") vp0) ^^ string "]" ^^ string ")"
| V_proj(p,vp) -> string "V_proj" ^^ string "(" ^^  string "\"" ^^ string p ^^ string "\"" ^^ string "," ^^ pp_raw_vp vp ^^ string ")"


and pp_raw_klist x = string "[" ^^ separate (string ",") (List.map (function (x,(b,c)) -> (pp_raw_xp x ^^ pp_raw_bp b ^^ pp_raw_cp c )) x) ^^ string "]"
and pp_raw_patp x = match x with
| Pp_id(loc,id) -> string "Pp_id" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string ")"
| Pp_wild(loc) -> string "Pp_wild"
| Pp_lit(loc,lit) -> string "Pp_lit" ^^ string "(" ^^ pp_raw_lit lit ^^ string ")"
| Pp_typ(loc,tp,patp) -> string "Pp_typ" ^^ string "(" ^^ pp_raw_tp tp ^^ string "," ^^ pp_raw_patp patp ^^ string ")"
| Pp_app(loc,id,patp0) -> string "Pp_app" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (patp0) -> string "(" ^^ pp_raw_patp patp0 ^^ string ")") patp0) ^^ string "]" ^^ string ")"
| Pp_tup(loc,patp0) -> string "Pp_tup" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (patp0) -> string "(" ^^ pp_raw_patp patp0 ^^ string ")") patp0) ^^ string "]" ^^ string ")"
| Pp_vector_concat(loc,patp0) -> string "Pp_vector_concat" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (patp0) -> string "(" ^^ pp_raw_patp patp0 ^^ string ")") patp0) ^^ string "]" ^^ string ")"
| Pp_as_var(loc,patp,xp) -> string "Pp_as_var" ^^ string "(" ^^ pp_raw_patp patp ^^ string "," ^^ pp_raw_xp xp ^^ string ")"
| Pp_as_typ(loc,patp,tp) -> string "Pp_as_typ" ^^ string "(" ^^ pp_raw_patp patp ^^ string "," ^^ pp_raw_tp tp ^^ string ")"
| Pp_cons(loc,patp1,patp2) -> string "Pp_cons" ^^ string "(" ^^ pp_raw_patp patp1 ^^ string "," ^^ pp_raw_patp patp2 ^^ string ")"
| Pp_string_append(loc,patp0) -> string "Pp_string_append" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (patp0) -> string "(" ^^ pp_raw_patp patp0 ^^ string ")") patp0) ^^ string "]" ^^ string ")"
| Pp_vector(loc,patp0) -> string "Pp_vector" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (patp0) -> string "(" ^^ pp_raw_patp patp0 ^^ string ")") patp0) ^^ string "]" ^^ string ")"
| Pp_list(loc,patp0) -> string "Pp_list" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (patp0) -> string "(" ^^ pp_raw_patp patp0 ^^ string ")") patp0) ^^ string "]" ^^ string ")"
(*| Pp_record(loc,field0_patp0) -> string "Pp_record" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (field0,patp0) -> string "(" ^^  string "\"" ^^ string field0 ^^ string "\"" ^^ string "," ^^ pp_raw_patp patp0 ^^ string ")") field0_patp0) ^^ string "]" ^^ string ")"
 *)
and pp_raw_pexpp x = match x with
| PEXPp_exp(patp,ep) -> string "PEXPp_exp" ^^ string "(" ^^ pp_raw_patp patp ^^ string "," ^^ pp_raw_ep ep ^^ string ")"
| PEXPp_when(patp,ep1,ep2) -> string "PEXPp_when" ^^ string "(" ^^ pp_raw_patp patp ^^ string "," ^^ pp_raw_ep ep1 ^^ string "," ^^ pp_raw_ep ep2 ^^ string ")"

and pp_raw_letbindp x = match x with
| LBp_val(loc,patp,ep) -> string "LBp_val" ^^ string "(" ^^ pp_raw_patp patp ^^ string "," ^^ pp_raw_ep ep ^^ string ")"

and pp_raw_lexpp x = match x with
| LEXPp_mvar(loc,up) -> string "LEXPp_mvar" ^^ string "(" ^^  string "\"" ^^ string up ^^ string "\"" ^^ string ")"
| LEXPp_cast(loc,tp,up) -> string "LEXPp_cast" ^^ string "(" ^^ pp_raw_tp tp ^^ string "," ^^  string "\"" ^^ string up ^^ string "\"" ^^ string ")"
| LEXPp_tup(loc,lexpp0) -> string "LEXPp_tup" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (lexpp0) -> string "(" ^^ pp_raw_lexpp lexpp0 ^^ string ")") lexpp0) ^^ string "]" ^^ string ")"
| LEXPp_field(loc,lexpp,id) -> string "LEXPp_field" ^^ string "(" ^^ pp_raw_lexpp lexpp ^^ string "," ^^  string "\"" ^^ string id ^^ string "\"" ^^ string ")"

and pp_raw_ep x = match x with
| Ep_val(loc,vp) -> string "Ep_val" ^^ string "(" ^^ pp_loc loc ^^ string " , " ^^ pp_raw_vp vp ^^ string ")"
| Ep_mvar(loc,up) -> string "Ep_mvar" ^^ string "(" ^^  string "\"" ^^ string up ^^ string "\"" ^^ string ")"
| Ep_concat(loc,ep0) -> string "Ep_concat" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (ep0) -> string "(" ^^ pp_raw_ep ep0 ^^ string ")") ep0) ^^ string "]" ^^ string ")"
| Ep_tuple(loc,ep0) -> string "Ep_tuple" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (ep0) -> string "(" ^^ pp_raw_ep ep0 ^^ string ")") ep0) ^^ string "]" ^^ string ")"
| Ep_app(loc,fp,ep) -> string "Ep_app" ^^ string "(" ^^ pp_raw_xp fp ^^ string "," ^^ pp_raw_ep ep ^^ string ")"
| Ep_bop(loc,bop,ep1,ep2) -> string "Ep_bop" ^^ string "(" ^^ pp_raw_bop bop ^^ string "," ^^ pp_raw_ep ep1 ^^ string "," ^^ pp_raw_ep ep2 ^^ string ")"
| Ep_uop(loc,uop,ep) -> string "Ep_uop" ^^ string "(" ^^ pp_raw_uop uop ^^ string "," ^^ pp_raw_ep ep ^^ string ")"
| Ep_proj(loc,p,ep) -> string "Ep_proj" ^^ string "(" ^^  string "\"" ^^ string p ^^ string "\"" ^^ string "," ^^ pp_raw_ep ep ^^ string ")"
| Ep_constr(loc,ctor,ep) -> string "Ep_constr" ^^ string "(" ^^  string "\"" ^^ string ctor ^^ string "\"" ^^ string "," ^^ pp_raw_ep ep ^^ string ")"
| Ep_field_access(loc,ep,field) -> string "Ep_field_access" ^^ string "(" ^^ pp_raw_ep ep ^^ string "," ^^  string "\"" ^^ string field ^^ string "\"" ^^ string ")"
| Ep_sizeof(loc,cep) -> string "Ep_sizeof" ^^ string "(" ^^ pp_raw_cep cep ^^ string ")"
| Ep_cast(loc,tp,ep) -> string "Ep_cast" ^^ string "(" ^^ pp_raw_tp tp ^^ string "," ^^ pp_raw_ep ep ^^ string ")"
| Ep_record(loc,field0_ep0) -> string "Ep_record" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (field0,ep0) -> string "(" ^^  string "\"" ^^ string field0 ^^ string "\"" ^^ string "," ^^ pp_raw_ep ep0 ^^ string ")") field0_ep0) ^^ string "]" ^^ string ")"
| Ep_record_update(loc,ep,field0_ep0) -> string "Ep_record_update" ^^ string "(" ^^ pp_raw_ep ep ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (field0,ep0) -> string "(" ^^  string "\"" ^^ string field0 ^^ string "\"" ^^ string "," ^^ pp_raw_ep ep0 ^^ string ")") field0_ep0) ^^ string "]" ^^ string ")"
| Ep_let(loc,letbindp,ep2) -> string "Ep_let" ^^ string "(" ^^ pp_raw_letbindp letbindp ^^ string "," ^^ pp_raw_ep ep2 ^^ string ")"
| Ep_let2(loc,xp,tp,ep1,ep2) -> string "Ep_let2" ^^ string "(" ^^ pp_raw_xp xp ^^ string "," ^^ pp_raw_tp tp ^^ string "," ^^ pp_raw_ep ep1 ^^ string "," ^^ pp_raw_ep ep2 ^^ string ")"
| Ep_if(loc,ep1,ep2,ep3) -> string "Ep_if" ^^ string "(" ^^ pp_raw_ep ep1 ^^ string "," ^^ pp_raw_ep ep2 ^^ string "," ^^ pp_raw_ep ep3 ^^ string ")"
| Ep_block(loc,ep0) -> string "Ep_block" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (ep0) -> string "(" ^^ pp_raw_ep ep0 ^^ string ")") ep0) ^^ string "]" ^^ string ")"
| Ep_case(loc,ep,pexpp0) -> string "Ep_case" ^^ string "(" ^^ pp_raw_ep ep ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (pexpp0) -> string "(" ^^ pp_raw_pexpp pexpp0 ^^ string ")") pexpp0) ^^ string "]" ^^ string ")"
| Ep_assign(loc,lexpp,ep1,ep2) -> string "Ep_assign" ^^ string "(" ^^ pp_raw_lexpp lexpp ^^ string "," ^^ pp_raw_ep ep1 ^^ string "," ^^ pp_raw_ep ep2 ^^ string ")"
| Ep_exit(loc,ep) -> string "Ep_exit" ^^ string "(" ^^ pp_raw_ep ep ^^ string ")"
| Ep_return(loc,ep) -> string "Ep_return" ^^ string "(" ^^ pp_raw_ep ep ^^ string ")"
| Ep_throw(loc,ep) -> string "Ep_throw" ^^ string "(" ^^ pp_raw_ep ep ^^ string ")"
| Ep_try(loc,ep,pexpp0) -> string "Ep_try" ^^ string "(" ^^ pp_raw_ep ep ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (pexpp0) -> string "(" ^^ pp_raw_pexpp pexpp0 ^^ string ")") pexpp0) ^^ string "]" ^^ string ")"
| Ep_constraint(loc,cp) -> string "Ep_constraint" ^^ string "(" ^^ pp_raw_cp cp ^^ string ")"
| Ep_loop(loc,loop,ep1,ep2) -> string "Ep_loop" ^^ string "(" ^^ pp_raw_loop loop ^^ string "," ^^ pp_raw_ep ep1 ^^ string "," ^^ pp_raw_ep ep2 ^^ string ")"
| Ep_for(loc,id,ep1,ep2,ep3,order,ep4) -> string "Ep_for" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string "," ^^ pp_raw_ep ep1 ^^ string "," ^^ pp_raw_ep ep2 ^^ string "," ^^ pp_raw_ep ep3 ^^ string "," ^^ pp_raw_order order ^^ string "," ^^ pp_raw_ep ep4 ^^ string ")"
| Ep_assert(loc,ep1,ep2) -> string "Ep_assert" ^^ string "(" ^^ pp_raw_ep ep1 ^^ string "," ^^ pp_raw_ep ep2 ^^ string ")"
| Ep_vec(loc,ep0) -> string "Ep_vec" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (ep0) -> string "(" ^^ pp_raw_ep ep0 ^^ string ")") ep0) ^^ string "]" ^^ string ")"
| Ep_list(loc,ep0) -> string "Ep_list" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (ep0) -> string "(" ^^ pp_raw_ep ep0 ^^ string ")") ep0) ^^ string "]" ^^ string ")"
| Ep_cons(loc,ep1,ep2) -> string "Ep_cons" ^^ string "(" ^^ pp_raw_ep ep1 ^^ string "," ^^ pp_raw_ep ep2 ^^ string ")"

and pp_raw_funclp x = match x with
| FCLp_funcl(loc,id,pexpp) -> string "FCLp_funcl" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string "," ^^ pp_raw_pexpp pexpp ^^ string ")"

and pp_raw_tannot_opt_p x = match x with
| Typ_annot_opt_pnone(loc) -> string "Typ_annot_opt_pnone"
| Typ_annot_opt_psome(loc,klist,tp) -> string "Typ_annot_opt_psome" ^^ string "(" ^^ pp_raw_klist klist ^^ string "," ^^ pp_raw_tp tp ^^ string ")"
| Typ_annot_opt_psome_fn(loc,ap) -> string "Typ_annot_opt_psome_fn" ^^ string "(" ^^ pp_raw_ap ap ^^ string ")"

and pp_raw_scattered_defp x = match x with
| SDp_function(loc,tannot_opt_p,id) -> string "SDp_function" ^^ string "(" ^^ pp_raw_tannot_opt_p tannot_opt_p ^^ string "," ^^  string "\"" ^^ string id ^^ string "\"" ^^ string ")"
| SDp_variant(loc,id,kp0_bp0_cp0) -> string "SDp_variant" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (kp0,(bp0,cp0)) -> string "(" ^^ pp_raw_xp kp0 ^^ string "," ^^ pp_raw_bp bp0 ^^ string "," ^^ pp_raw_cp cp0 ^^ string ")") kp0_bp0_cp0) ^^ string "]" ^^ string ")"
| SDp_unioncl(loc,id1,id2,tp) -> string "SDp_unioncl" ^^ string "(" ^^  string "\"" ^^ string id1 ^^ string "\"" ^^ string "," ^^  string "\"" ^^ string id2 ^^ string "\"" ^^ string "," ^^ pp_raw_tp tp ^^ string ")"
| SDp_funclp(loc,funclp) -> string "SDp_funclp" ^^ string "(" ^^ pp_raw_funclp funclp ^^ string ")"
| SDp_end(loc,id) -> string "SDp_end" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string ")"

and pp_raw_defp x = match x with
| DEFp_fundef(loc,ap,funclp0) -> string "DEFp_fundef" ^^ string "(" ^^ pp_raw_ap ap ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (funclp0) -> string "(" ^^ pp_raw_funclp funclp0 ^^ string ")") funclp0) ^^ string "]" ^^ string ")"
| DEFp_typedef(loc,id,kp0_bp0_cp0,tp) -> string "DEFp_typedef" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (kp0,(bp0,cp0)) -> string "(" ^^ pp_raw_xp kp0 ^^ string "," ^^ pp_raw_bp bp0 ^^ string "," ^^ pp_raw_cp cp0 ^^ string ")") kp0_bp0_cp0) ^^ string "]" ^^ string "," ^^ pp_raw_tp tp ^^ string ")"
| DEFp_spec(loc,id,ap) -> string "DEFp_spec" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string "," ^^ pp_raw_ap ap ^^ string ")"
| DEFp_val(loc,letbindp) -> string "DEFp_val" ^^ string "(" ^^ pp_raw_letbindp letbindp ^^ string ")"
| DEFp_reg(loc,tp,xp) -> string "DEFp_reg" ^^ string "(" ^^ pp_raw_tp tp ^^ string "," ^^ pp_raw_xp xp ^^ string ")"
| DEFp_overload(loc,id,id0) -> string "DEFp_overload" ^^ string "(" ^^  string "\"" ^^ string id ^^ string "\"" ^^ string "," ^^ string "[" ^^ separate  (string ";") (List.map (function (id0) -> string "(" ^^  string "\"" ^^ string id0 ^^ string "\"" ^^ string ")") id0) ^^ string "]" ^^ string ")"
| DEFp_scattered(loc,scattered_defp) -> string "DEFp_scattered" ^^ string "(" ^^ pp_raw_scattered_defp scattered_defp ^^ string ")"
| DEFp_default(loc,order) -> string "DEFp_default" ^^ string "(" ^^ pp_raw_order order ^^ string ")"

and pp_raw_progp x = match x with
| Pp_prog(defp0) -> string "Pp_prog" ^^ string "(" ^^ string "[" ^^ separate  (string ";") (List.map (function (defp0) -> string "(" ^^ pp_raw_defp defp0 ^^ string ")") defp0) ^^ string "]" ^^ string ")"


let rec pp_lit x = match x with
| L_unit -> string "(" ^^ string "(" ^^ string " " ^^ string ")" ^^ string ")"
| L_zero -> string "bitzero"
| L_one -> string "bitone"
| L_true -> string "true"
| L_false -> string "false"
| L_num(num) -> string (str_int num)
| L_string(string_val) -> string string_val
| L_undef -> string "undefined"
| L_real(real_val) -> string real_val
| _ -> string "some lit"

and pp_order x = match x with
| Ord_inc -> string "inc"
| Ord_dec -> string "dec"
| Ord_def -> string "def_order"

and pp_loop x = match x with
| While -> string "while"
| Until -> string "until"

(*and pp_force_coq_lists x = match x with
| Dxp(xp0) -> separate (string " ") (List.map (function (xp0) -> pp_xp xp0) xp0)
| Dtp(tp0) -> separate (string " ") (List.map (function (tp0) -> pp_tp tp0) tp0)
 *)
and pp_xp x = match x with
| VNamed(id) -> string id
| VIndex -> string "#0"

(*and pp_bsub x = match x with
| BS_empty -> string "empty"
| BS_cons(bsub,bp,tvar) -> string "(" ^^ pp_bsub bsub ^^ string " " ^^ string "," ^^ string " " ^^ pp_bp bp ^^ string " " ^^ string "/" ^^ string " " ^^ string tvar ^^ string ")"
 *)
and pp_bp x = match x with
| B_var(tvar) -> string tvar
| B_tid(id) -> string "(" ^^ string "tid" ^^ string " " ^^ string id ^^ string ")"
| B_int -> string "int"
| B_bool -> string "bool"
| B_bit -> string "bit"
| B_unit -> string "unit"
| B_real -> string "real"
| B_vec(order,bp) -> string "(" ^^ string "vec" ^^ string " " ^^ pp_order order ^^ string " " ^^ pp_bp bp ^^ string ")"
| B_list(bp) -> string "(" ^^ string "list" ^^ string " " ^^ pp_bp bp ^^ string ")"
| B_tuple(bp0) -> string "(" ^^ string "(" ^^ string " " ^^ separate (string ",") (List.map (function (bp0) -> pp_bp bp0) bp0) ^^ string " " ^^ string ")" ^^ string ")"
| B_union(id,ctor0_tp0) -> string "(" ^^ string id ^^ string " " ^^ string "<" ^^ string " " ^^ separate (string ",") (List.map (function (ctor0,tp0) -> string ctor0 ^^ string " " ^^ string ":" ^^ string " " ^^ pp_tp tp0) ctor0_tp0) ^^ string " " ^^ string ">" ^^ string ")"
| B_record(field0_bp0) -> string "(" ^^ string "{" ^^ string " " ^^ separate (string ",") (List.map (function (field0,bp0) -> string field0 ^^ string " " ^^ string ":" ^^ string " " ^^ pp_bp bp0) field0_bp0) ^^ string " " ^^ string "}" ^^ string ")"
| B_undef -> string "undef"
| B_reg _ -> string "(" ^^ string "reg" ^^ string " " ^^ string "t" ^^ string ")"
| B_string -> string "string"
| B_exception -> string "exception"
| B_finite_set(num0) -> string "(" ^^ string "{" ^^ string " " ^^ separate (string ",") (List.map (function (num0) -> string (str_int num0)) num0) ^^ string " " ^^ string "}" ^^ string ")"

and pp_tp x = match x with
| T_refined_type(zp,bp,cp) -> string "(" ^^ string "{" ^^ string " " ^^ pp_xp zp ^^ string " " ^^ string ":" ^^ string " " ^^ pp_bp bp ^^ string " " ^^ string "|" ^^ string " " ^^ pp_cp cp ^^ string " " ^^ string "}" ^^ string ")"

and pp_ap x = match x with
| A_monotype(tp) -> pp_tp tp
| A_function(xp,bp,cp,tp) -> string "(" ^^ pp_xp xp ^^ string " " ^^ string ":" ^^ string " " ^^ pp_bp bp ^^ string " " ^^ string "[" ^^ string " " ^^ pp_cp cp ^^ string " " ^^ string "]" ^^ string " " ^^ string "->" ^^ string " " ^^ pp_tp tp ^^ string ")"

and pp_bop x = match x with
| Plus -> string "+"
| Minus -> string "-"
| Times -> string "*"
| Div -> string "div"
| Mod -> string "mod"
| LEq -> string "<="
| LT -> string "<"
| GT -> string ">"
| GEq -> string ">="
| Eq -> string "="
| And -> string "&"
| Or -> string "||"
| NEq -> string "!="

and pp_uop x = match x with
| Len -> string "len"
| Exp -> string "exp"
| Neg -> string "neg"
| Nott -> string "not"
| Abs -> string "abs"

and pp_cep x = match x with
| CE_val(vp) -> pp_vp vp
| CE_bop(bop,cep1,cep2) -> string "(" ^^ pp_cep cep1 ^^ string " " ^^ pp_bop bop ^^ string " " ^^ pp_cep cep2 ^^ string ")"
| CE_many_plus(cep0) -> string "(" ^^ string "sum" ^^ string " " ^^ string "(" ^^ string " " ^^ separate (string " ") (List.map (function (cep0) -> pp_cep cep0) cep0) ^^ string " " ^^ string ")" ^^ string ")"
| CE_uop(uop,cep) -> string "(" ^^ pp_uop uop ^^ string " " ^^ pp_cep cep ^^ string ")"
| CE_proj(p,cep) -> string "(" ^^ string "proj" ^^ string " " ^^ string p ^^ string " " ^^ pp_cep cep ^^ string ")"
| CE_field_access(xp,field) -> string "(" ^^ pp_vp xp ^^ string " " ^^ string "." ^^ string " " ^^ string field ^^ string ")"

and pp_cp x = match x with
| C_true -> string "true"
| C_false -> string "false"
| C_conj(cp1,cp2) -> string "(" ^^ pp_cp cp1 ^^ string " " ^^ string "/\\" ^^ string " " ^^ pp_cp cp2 ^^ string ")"
| C_conj_many(cp0) -> separate (string "/\\") (List.map (function (cp0) -> pp_cp cp0) cp0)
| C_disj(cp1,cp2) -> string "(" ^^ pp_cp cp1 ^^ string " " ^^ string "\\/" ^^ string " " ^^ pp_cp cp2 ^^ string ")"
| C_not(cp) -> string "(" ^^ string "~" ^^ string " " ^^ pp_cp cp ^^ string ")"
| C_eq(cep1,cep2) -> string "(" ^^ pp_cep cep1 ^^ string " " ^^ string "=" ^^ string " " ^^ pp_cep cep2 ^^ string ")"
| C_leq(cep1,cep2) -> string "(" ^^ pp_cep cep1 ^^ string " " ^^ string "<=" ^^ string " " ^^ pp_cep cep2 ^^ string ")"
| C_imp(cp1,cp2) -> string "(" ^^ pp_cp cp1 ^^ string " " ^^ string "==>" ^^ string " " ^^ pp_cp cp2 ^^ string ")"

and pp_vp x = match x with
| V_lit(lit) -> pp_lit lit
| V_var(xp) -> pp_xp xp
| V_vec(vp0) -> string "(" ^^ string "[" ^^ string " " ^^ separate (string ",") (List.map (function (vp0) -> pp_vp vp0) vp0) ^^ string " " ^^ string "]" ^^ string ")"
| V_list(vp0) -> string "(" ^^ string "[|" ^^ string " " ^^ separate (string ",") (List.map (function (vp0) -> pp_vp vp0) vp0) ^^ string " " ^^ string "|]" ^^ string ")"
| V_cons(vp1,vp2) -> string "(" ^^ string "cons" ^^ string " " ^^ pp_vp vp1 ^^ string " " ^^ pp_vp vp2 ^^ string ")"
| V_constr(ctor,vp) -> string "(" ^^ string ctor ^^ string " " ^^ pp_vp vp ^^ string ")"
| V_record(field0_vp0) -> string "(" ^^ string "{" ^^ string " " ^^ separate (string ",") (List.map (function (field0,vp0) -> string field0 ^^ string " " ^^ string "=" ^^ string " " ^^ pp_vp vp0) field0_vp0) ^^ string " " ^^ string "}" ^^ string ")"
| V_tuple(vp0) -> string "(" ^^ string "(" ^^ string " " ^^ separate (string ",") (List.map (function (vp0) -> pp_vp vp0) vp0) ^^ string " " ^^ string ")" ^^ string ")"
| V_proj(p,vp) -> string "(" ^^ string "proj" ^^ string " " ^^ string p ^^ string " " ^^ pp_vp vp ^^ string ")"


and pp_klist x = separate (string ",") (List.map (function (x,(b,c)) -> (pp_xp x ^^ pp_bp b ^^ pp_cp c )) x)
and pp_patp x = match x with
| Pp_id(loc,id) -> string id
| Pp_wild(loc) -> string "_"
| Pp_lit(loc,lit) -> pp_lit lit
| Pp_typ(loc,tp,patp) -> string "(" ^^ string "(" ^^ string " " ^^ pp_tp tp ^^ string " " ^^ string ")" ^^ string " " ^^ pp_patp patp ^^ string ")"
| Pp_app(loc,id,patp0) -> string "(" ^^ string id ^^ string " " ^^ string "(" ^^ string " " ^^ separate (string ",") (List.map (function (patp0) -> pp_patp patp0) patp0) ^^ string " " ^^ string ")" ^^ string ")"
| Pp_tup(loc,patp0) -> string "(" ^^ string "(" ^^ string " " ^^ separate (string ",") (List.map (function (patp0) -> pp_patp patp0) patp0) ^^ string " " ^^ string ")" ^^ string ")"
| Pp_vector_concat(loc,patp0) -> separate (string ":") (List.map (function (patp0) -> pp_patp patp0) patp0)
| Pp_as_var(loc,patp,xp) -> string "(" ^^ pp_patp patp ^^ string " " ^^ string "as" ^^ string " " ^^ pp_xp xp ^^ string ")"
| Pp_as_typ(loc,patp,tp) -> string "(" ^^ pp_patp patp ^^ string " " ^^ string "as" ^^ string " " ^^ pp_tp tp ^^ string ")"
| Pp_cons(loc,patp1,patp2) -> string "(" ^^ pp_patp patp1 ^^ string " " ^^ string "::" ^^ string " " ^^ pp_patp patp2 ^^ string ")"
| Pp_string_append(loc,patp0) -> separate (string "^^") (List.map (function (patp0) -> pp_patp patp0) patp0)
| Pp_vector(loc,patp0) -> string "(" ^^ string "[" ^^ string " " ^^ separate (string ",") (List.map (function (patp0) -> pp_patp patp0) patp0) ^^ string " " ^^ string "]" ^^ string ")"
| Pp_list(loc,patp0) -> string "(" ^^ string "[|" ^^ string " " ^^ separate (string ",") (List.map (function (patp0) -> pp_patp patp0) patp0) ^^ string " " ^^ string "|]" ^^ string ")"
(*| Pp_record(loc,field0_patp0) -> string "(" ^^ string "{" ^^ string " " ^^ separate (string ";") (List.map (function (field0,patp0) -> string field0 ^^ string " " ^^ string "=" ^^ string " " ^^ pp_patp patp0) field0_patp0) ^^ string " " ^^ string "}" ^^ string ")"
 *)
and pp_pexpp x = match x with
| PEXPp_exp(patp,ep) -> string "(" ^^ pp_patp patp ^^ string " " ^^ string "=>" ^^ string " " ^^ pp_ep ep ^^ string ")"
| PEXPp_when(patp,ep1,ep2) -> string "(" ^^ pp_patp patp ^^ string " " ^^ string "when" ^^ string " " ^^ pp_ep ep1 ^^ string " " ^^ string "=>" ^^ string " " ^^ pp_ep ep2 ^^ string ")"

and pp_letbindp x = match x with
| LBp_val(loc,patp,ep) -> string "(" ^^ string "let" ^^ string " " ^^ pp_patp patp ^^ string " " ^^ string "=" ^^ string " " ^^ pp_ep ep ^^ string ")"

and pp_lexpp x = match x with
| LEXPp_mvar(loc,up) -> string up
| LEXPp_cast(loc,tp,up) -> string "(" ^^ string "(" ^^ string " " ^^ pp_tp tp ^^ string " " ^^ string ")" ^^ string " " ^^ string up ^^ string ")"
| LEXPp_tup(loc,lexpp0) -> string "(" ^^ string "(" ^^ string " " ^^ separate (string ",") (List.map (function (lexpp0) -> pp_lexpp lexpp0) lexpp0) ^^ string " " ^^ string ")" ^^ string ")"
| LEXPp_field(loc,lexpp,id) -> string "(" ^^ pp_lexpp lexpp ^^ string " " ^^ string "." ^^ string " " ^^ string id ^^ string ")"

and pp_ep x = match x with
| Ep_val(loc,vp) -> pp_vp vp
| Ep_mvar(loc,up) -> string up
| Ep_concat(loc,ep0) -> string "(" ^^ string "[" ^^ string " " ^^ separate (string ";") (List.map (function (ep0) -> pp_ep ep0) ep0) ^^ string " " ^^ string "]" ^^ string ")"
| Ep_tuple(loc,ep0) -> string "(" ^^ string "(" ^^ string " " ^^ separate (string ",") (List.map (function (ep0) -> pp_ep ep0) ep0) ^^ string " " ^^ string ")" ^^ string ")"
| Ep_app(loc,fp,ep) -> string "(" ^^ pp_xp fp ^^ string " " ^^ pp_ep ep ^^ string ")"
| Ep_bop(loc,bop,ep1,ep2) -> string "(" ^^ pp_bop bop ^^ string " " ^^ pp_ep ep1 ^^ string " " ^^ pp_ep ep2 ^^ string ")"
| Ep_uop(loc,uop,ep) -> string "(" ^^ pp_uop uop ^^ string " " ^^ pp_ep ep ^^ string ")"
| Ep_proj(loc,p,ep) -> string "(" ^^ string "proj" ^^ string " " ^^ string p ^^ string " " ^^ pp_ep ep ^^ string ")"
| Ep_constr(loc,ctor,ep) -> string "(" ^^ string ctor ^^ string " " ^^ pp_ep ep ^^ string ")"
| Ep_field_access(loc,ep,field) -> string "(" ^^ pp_ep ep ^^ string " " ^^ string "." ^^ string " " ^^ string field ^^ string ")"
| Ep_sizeof(loc,cep) -> string "(" ^^ string "sizeof" ^^ string " " ^^ pp_cep cep ^^ string ")"
| Ep_cast(loc,tp,ep) -> string "(" ^^ string "cast" ^^ string " " ^^ pp_tp tp ^^ string " " ^^ pp_ep ep ^^ string ")"
| Ep_record(loc,field0_ep0) -> string "(" ^^ string "{" ^^ string " " ^^ separate (string ",") (List.map (function (field0,ep0) -> string field0 ^^ string " " ^^ string "=" ^^ string " " ^^ pp_ep ep0) field0_ep0) ^^ string " " ^^ string "}" ^^ string ")"
| Ep_record_update(loc,ep,field0_ep0) -> string "(" ^^ string "{" ^^ string " " ^^ pp_ep ep ^^ string " " ^^ string "with" ^^ string " " ^^ separate (string ";") (List.map (function (field0,ep0) -> string field0 ^^ string " " ^^ string "=" ^^ string " " ^^ pp_ep ep0) field0_ep0) ^^ string " " ^^ string "}" ^^ string ")"
| Ep_let(loc,letbindp,ep2) -> string "(" ^^ pp_letbindp letbindp ^^ string " " ^^ string "in" ^^ string " " ^^ pp_ep ep2 ^^ string ")"
| Ep_let2(loc,xp,tp,ep1,ep2) -> string "(" ^^ string "let2" ^^ string " " ^^ pp_xp xp ^^ string " " ^^ string ":" ^^ string " " ^^ pp_tp tp ^^ string " " ^^ string "=" ^^ string " " ^^ pp_ep ep1 ^^ string " " ^^ string "in" ^^ string " " ^^ pp_ep ep2 ^^ string ")"
| Ep_if(loc,ep1,ep2,ep3) -> string "(" ^^ string "if" ^^ string " " ^^ pp_ep ep1 ^^ string " " ^^ string "then" ^^ string " " ^^ pp_ep ep2 ^^ string " " ^^ string "else" ^^ string " " ^^ pp_ep ep3 ^^ string ")"
| Ep_block(loc,ep0) -> string "(" ^^ string "{" ^^ string " " ^^ separate (string ";") (List.map (function (ep0) -> pp_ep ep0) ep0) ^^ string " " ^^ string "}" ^^ string ")"
| Ep_case(loc,ep,pexpp0) -> string "(" ^^ string "match" ^^ string " " ^^ pp_ep ep ^^ string " " ^^ string "{" ^^ string " " ^^ separate (string ",") (List.map (function (pexpp0) -> pp_pexpp pexpp0) pexpp0) ^^ string " " ^^ string "}" ^^ string ")"
| Ep_assign(loc,lexpp,ep1,ep2) -> string "(" ^^ pp_lexpp lexpp ^^ string " " ^^ string ":=" ^^ string " " ^^ pp_ep ep1 ^^ string " " ^^ string "in" ^^ string " " ^^ pp_ep ep2 ^^ string ")"
| Ep_exit(loc,ep) -> string "(" ^^ string "exit" ^^ string " " ^^ pp_ep ep ^^ string ")"
| Ep_return(loc,ep) -> string "(" ^^ string "return" ^^ string " " ^^ pp_ep ep ^^ string ")"
| Ep_throw(loc,ep) -> string "(" ^^ string "throw" ^^ string " " ^^ pp_ep ep ^^ string ")"
| Ep_try(loc,ep,pexpp0) -> string "(" ^^ string "try" ^^ string " " ^^ pp_ep ep ^^ string " " ^^ string "catch" ^^ string " " ^^ separate (string " ") (List.map (function (pexpp0) -> pp_pexpp pexpp0) pexpp0) ^^ string ")"
| Ep_constraint(loc,cp) -> string "(" ^^ string "constraint" ^^ string " " ^^ pp_cp cp ^^ string ")"
| Ep_loop(loc,loop,ep1,ep2) -> string "(" ^^ pp_loop loop ^^ string " " ^^ pp_ep ep1 ^^ string " " ^^ pp_ep ep2 ^^ string ")"
| Ep_for(loc,id,ep1,ep2,ep3,order,ep4) -> string "(" ^^ string "for" ^^ string " " ^^ string "(" ^^ string " " ^^ string id ^^ string " " ^^ string "from" ^^ string " " ^^ pp_ep ep1 ^^ string " " ^^ string "to" ^^ string " " ^^ pp_ep ep2 ^^ string " " ^^ string "by" ^^ string " " ^^ pp_ep ep3 ^^ string " " ^^ string "in" ^^ string " " ^^ pp_order order ^^ string " " ^^ string ")" ^^ string " " ^^ pp_ep ep4 ^^ string ")"
| Ep_assert(loc,ep1,ep2) -> string "(" ^^ string "assert" ^^ string " " ^^ pp_ep ep1 ^^ string " " ^^ pp_ep ep2 ^^ string ")"
| Ep_vec(loc,ep0) -> string "(" ^^ string "[" ^^ string " " ^^ separate (string ",") (List.map (function (ep0) -> pp_ep ep0) ep0) ^^ string " " ^^ string "]" ^^ string ")"
| Ep_list(loc,ep0) -> string "(" ^^ string "[||" ^^ string " " ^^ separate (string ",") (List.map (function (ep0) -> pp_ep ep0) ep0) ^^ string " " ^^ string "||]" ^^ string ")"
| Ep_cons(loc,ep1,ep2) -> string "(" ^^ pp_ep ep1 ^^ string " " ^^ string "::" ^^ string " " ^^ pp_ep ep2 ^^ string ")"

and pp_funclp x = match x with
| FCLp_funcl(loc,id,pexpp) -> string "(" ^^ string id ^^ string " " ^^ pp_pexpp pexpp ^^ string ")"

and pp_tannot_opt_p x = match x with
| Typ_annot_opt_pnone(loc) -> string ""
| Typ_annot_opt_psome(loc,klist,tp) -> string "(" ^^ pp_klist klist ^^ string " " ^^ pp_tp tp ^^ string ")"
| Typ_annot_opt_psome_fn(loc,ap) -> pp_ap ap

and pp_scattered_defp x = match x with
| SDp_function(loc,tannot_opt_p,id) -> string "(" ^^ string "scattered" ^^ string " " ^^ string "function" ^^ string " " ^^ pp_tannot_opt_p tannot_opt_p ^^ string " " ^^ string id ^^ string ")"
| SDp_variant(loc,id,kp0_bp0_cp0) -> string "(" ^^ string "scattered" ^^ string " " ^^ string "union" ^^ string " " ^^ string id ^^ string " " ^^ separate (string " ") (List.map (function (kp0,(bp0,cp0)) -> pp_xp kp0 ^^ string " " ^^ string ":" ^^ string " " ^^ pp_bp bp0 ^^ string " " ^^ string "[" ^^ string " " ^^ pp_cp cp0 ^^ string " " ^^ string "]") kp0_bp0_cp0) ^^ string ")"
| SDp_unioncl(loc,id1,id2,tp) -> string "(" ^^ string "union" ^^ string " " ^^ string "clause" ^^ string " " ^^ string id1 ^^ string " " ^^ string "=" ^^ string " " ^^ string id2 ^^ string " " ^^ string ":" ^^ string " " ^^ pp_tp tp ^^ string ")"
| SDp_funclp(loc,funclp) -> string "(" ^^ string "function" ^^ string " " ^^ string "clause" ^^ string " " ^^ pp_funclp funclp ^^ string ")"
| SDp_end(loc,id) -> string "(" ^^ string "end" ^^ string " " ^^ string id ^^ string ")"

and pp_defp x = match x with
| DEFp_fundef(loc,ap,funclp0) -> string "(" ^^ string "function" ^^ string " " ^^ pp_ap ap ^^ string " " ^^ separate (string "and") (List.map (function (funclp0) -> pp_funclp funclp0) funclp0) ^^ string ")"
| DEFp_typedef(loc,id,kp0_bp0_cp0,tp) -> string "(" ^^ string "typedef" ^^ string " " ^^ string id ^^ string " " ^^ string "=" ^^ string " " ^^ string "ALL" ^^ string " " ^^ separate (string " ") (List.map (function (kp0,(bp0,cp0)) -> pp_xp kp0 ^^ string " " ^^ string ":" ^^ string " " ^^ pp_bp bp0 ^^ string " " ^^ string "[" ^^ string " " ^^ pp_cp cp0 ^^ string " " ^^ string "]") kp0_bp0_cp0) ^^ string " " ^^ pp_tp tp ^^ string ")"
| DEFp_spec(loc,id,ap) -> string "(" ^^ string "val" ^^ string " " ^^ string id ^^ string " " ^^ string ":" ^^ string " " ^^ pp_ap ap ^^ string ")"
| DEFp_val(loc,letbindp) -> pp_letbindp letbindp
| DEFp_reg(loc,tp,xp) -> string "(" ^^ string "register" ^^ string " " ^^ pp_tp tp ^^ string " " ^^ pp_xp xp ^^ string ")"
| DEFp_overload(loc,id,id0) -> string "(" ^^ string "overload" ^^ string " " ^^ string id ^^ string " " ^^ string "[" ^^ string " " ^^ separate (string ";") (List.map (function (id0) -> string id0) id0) ^^ string " " ^^ string "]" ^^ string ")"
| DEFp_scattered(loc,scattered_defp) -> pp_scattered_defp scattered_defp
| DEFp_default(loc,order) -> string "(" ^^ string "default" ^^ string " " ^^ pp_order order ^^ string ")"

and pp_progp x = match x with
| Pp_prog(defp0) -> separate (string " ") (List.map (function (defp0) -> pp_defp defp0) defp0)

